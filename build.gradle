plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'org.jetbrains.dokka' version '1.5.0'
}

def maven_version = library_version
def snapshotBranch = System.getenv('SNAPSHOT_BRANCH')
if(snapshotBranch != null) {
    if(snapshotBranch.startsWith('refs/heads/'))
        snapshotBranch = snapshotBranch.substring('refs/heads/'.length())
    maven_version = snapshotBranch.replaceAll('[^.\\w-]', '-') + '-SNAPSHOT'
    logger.lifecycle('Using SNAPSHOT version `{}`', version)
}

// pass `-PmirrorVersion=foo` to set the version directly. Useful for publishing to the local maven repository
if(hasProperty('mirrorVersion')) {
    maven_version = mirrorVersion
}

group = 'dev.thecodewarrior'
archivesBaseName = 'mirror'
version = maven_version

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation('org.jetbrains.kotlin:kotlin-stdlib')
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.0')
    testImplementation('io.mockk:mockk:1.10.0')
}

kotlin {
    explicitApi = 'warning'
}

configure([compileKotlin, compileTestKotlin]) {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
        freeCompilerArgs += '-Xjvm-default=all'
    }
}

configure([compileJava, compileTestJava]) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs.add('-parameters')
}

test {
    useJUnitPlatform()
}

// publishing

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    dependsOn(dokkaJavadoc)
    from(dokkaJavadoc.outputDirectory)
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'mirror'

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Mirror'
                description = 'Unlocking the power of reflection'
                url = 'https://github.com/thecodewarrior/Mirror'
                licenses {
                    license {
                        name = 'BSD-2-Clause'
                        url = 'https://opensource.org/licenses/BSD-2-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'thecodewarrior'
                        name = 'Pierce Corcoran'
                        email = 'code@thecodewarrior.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/thecodewarrior/Mirror.git'
                    developerConnection = 'scm:git:ssh://github.com:thecodewarrior/Mirror.git'
                    url = 'https://github.com/thecodewarrior/Mirror'
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepo = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepo = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = project.version.endsWith('SNAPSHOT') ? snapshotRepo : stagingRepo
            name = 'ossrh'
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    if(System.getenv("SIGNING_KEY") != null) {
        useInMemoryPgpKeys(
                System.getenv("SIGNING_KEY_ID"),
                System.getenv("SIGNING_KEY"),
                System.getenv("SIGNING_KEY_PASSWORD")
        )
    } else {
        useGpgCmd()
    }

    sign publishing.publications.maven
}
